import numpy as np
from PIL import Image

# 提供されたバイナリデータ
binary_data = """


"""

# データクレンジング: 不要な文字を除去
binary_data_cleaned = "".join([char for char in binary_data if char in "01"])

# バイナリデータの長さ
length = len(binary_data_cleaned)
assert length == 1679, "データ長が正しくありません。"

# 圧縮: ランレングスエンコーディング (RLE)
def rle_compress(data):
    compressed = []
    count = 1
    for i in range(1, len(data)):
        if data[i] == data[i - 1]:
            count += 1
        else:
            compressed.append((data[i - 1], count))
            count = 1
    compressed.append((data[-1], count))
    return compressed

# 解凍: RLEデータを復元
def rle_decompress(compressed):
    decompressed = []
    for bit, count in compressed:
        decompressed.extend([bit] * count)
    return "".join(decompressed)

# 圧縮実行
compressed_data = rle_compress(binary_data_cleaned)

# 解凍実行
decompressed_data = rle_decompress(compressed_data)
assert binary_data_cleaned == decompressed_data, "復元に失敗しました。"

# 画像の縦横サイズを決定 (可能な限り正方形に近い形)
width = int(np.sqrt(length))
while length % width != 0:
    width -= 1
height = length // width

# バイナリデータを画像データに変換
binary_array = np.array([int(bit) for bit in decompressed_data]).reshape((height, width))

# 画像生成
image = Image.fromarray(np.uint8(binary_array * 255), 'L')  # 白黒画像
image_path = "/mnt/data/reconstructed_image_prime.png"
image.save(image_path)
image.show()

image_path
